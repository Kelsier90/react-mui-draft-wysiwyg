{"version":3,"sources":["webpack:///../docs/configuration/toolbar.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","MUIEditor","MUIEditorState","toolbarControlTypes","LANG_PREFIX","config","toolbar","style","padding","background","React","createEmpty","editorState","setEditorState","onChange","newState","parentName","visible","position","controls","bold","italic","underline","controlsConfig","blockType","options","value","text","image","uploadCallback","file","Promise","resolve","reject","size","fontColor","colorsPerRow","fontBackgroundColor","fontSize","fontFamily","isMDXComponent"],"mappings":"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","file":"component---docs-configuration-toolbar-mdx-f732b544da2f5c94003d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/Documents/React Projects/components/react-mui-draft-wysiwyg/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport MUIEditor, { MUIEditorState, toolbarControlTypes, LANG_PREFIX } from \"../../src\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"toolbar\"\n    }}>{`toolbar`}</h1>\n    <p>{`Toolbar settings.`}</p>\n    <h2 {...{\n      \"id\": \"toolbarclassname\"\n    }}>{`toolbar.className`}</h2>\n    <p>{`The toolbar wrapper className prop.`}</p>\n    <h2 {...{\n      \"id\": \"toolbarstyle\"\n    }}>{`toolbar.style`}</h2>\n    <p>{`The toolbar wrapper style prop.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      style: {\\n        padding: 25,\\n        background: \\'#50c1ae\\',\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            style: {\n              padding: 25,\n              background: '#50c1ae'\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other styles.`}</p>\n    <h2 {...{\n      \"id\": \"toolbarvisible\"\n    }}>{`toolbar.visible`}</h2>\n    <p>{`Sets whether the toolbar is visible. It's `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` by default.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      visible: false,\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            visible: false\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and change the toolbar visibility.`}</p>\n    <h2 {...{\n      \"id\": \"toolbarposition\"\n    }}>{`toolbar.position`}</h2>\n    <p>{`Sets the toolbar position: Top or bottom.`}</p>\n    <p>{`Possible values: `}<inlineCode parentName=\"p\">{`'top'`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`'bottom'`}</inlineCode>{`. The default value is `}<inlineCode parentName=\"p\">{`'top'`}</inlineCode>{`.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      position: \\'bottom\\',\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            position: 'bottom'\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and change the toolbar position.`}</p>\n    <h2 {...{\n      \"id\": \"toolbarcontrols\"\n    }}>{`toolbar.controls`}</h2>\n    <p>{`Array that sets the toolbar controls. You can see the default controls on `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/default-configuration\"\n      }}>{`Default configuration section`}</a>{`.`}</p>\n    <p>{`In order to add the built-in controls you have to import them:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { toolbarControlTypes } from 'react-mui-draft-wysiwyg';\n`}</code></pre>\n    <p>{`And pass them to `}<inlineCode parentName=\"p\">{`toolbar.controls`}</inlineCode>{` option like this:`}</p>\n    <Playground __position={3} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controls: [\\n        toolbarControlTypes.bold,\\n        toolbarControlTypes.italic,\\n        toolbarControlTypes.underline,\\n      ],\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controls: [toolbarControlTypes.bold, toolbarControlTypes.italic, toolbarControlTypes.underline]\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`Let's see all the available controls.`}</p>\n    <h3 {...{\n      \"id\": \"undo\"\n    }}>{`undo`}</h3>\n    <p>{`This control allows the user undo the last change.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.undo\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"redo\"\n    }}>{`redo`}</h3>\n    <p>{`This control allows the user redo the last change.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.redo\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"bold\"\n    }}>{`bold`}</h3>\n    <p>{`This control allows the user toggle bold style of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.bold\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"italic\"\n    }}>{`italic`}</h3>\n    <p>{`This control allows the user toggle italic style of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.italic\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"underline\"\n    }}>{`underline`}</h3>\n    <p>{`This control allows the user toggle underline of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.underline\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"strikethrough\"\n    }}>{`strikethrough`}</h3>\n    <p>{`This control allows the user toggle strikethrough style of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.strikethrough\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fontcolor\"\n    }}>{`fontColor`}</h3>\n    <p>{`This control allows the user change the font color of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.fontColor\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fontbackgroundcolor\"\n    }}>{`fontBackgroundColor`}</h3>\n    <p>{`This control allows the user change the font background color of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.fontBackgroundColor\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"linkadd\"\n    }}>{`linkAdd`}</h3>\n    <p>{`This control allows the user add a link (URL) to the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.linkAdd\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"linkremove\"\n    }}>{`linkRemove`}</h3>\n    <p>{`This control allows the user remove all links of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.fontColor\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"image\"\n    }}>{`image`}</h3>\n    <p>{`This control allows the user add an image by uploading it or adding its URL.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.image\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"blocktype\"\n    }}>{`blockType`}</h3>\n    <p>{`This control allows the user change the paragraph style (Header 1, Header 2, etc.).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.blockType\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fontsize\"\n    }}>{`fontSize`}</h3>\n    <p>{`This control allows the user change the font size of the selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.fontSize\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fontfamily\"\n    }}>{`fontFamily`}</h3>\n    <p>{`This control allows the user change the font family (Arial, Sans Serif, etc) of the selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.fontFamily\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"textalign\"\n    }}>{`textAlign`}</h3>\n    <p>{`This control allows the user change text alignment (left, center, right and justify) of the selected paragraphs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.textAlign\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"unorderedlist\"\n    }}>{`unorderedList`}</h3>\n    <p>{`This control allows the user start an unordered list of items.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.unorderedList\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"orderedlist\"\n    }}>{`orderedList`}</h3>\n    <p>{`This control allows the user start an ordered list of items.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.orderedList\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"divider\"\n    }}>{`divider`}</h3>\n    <p>{`This control is purely cosmetic. Add a vertical line that allows you to separate the rest of the controls.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.divider\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"toolbarcontrolsconfig\"\n    }}>{`toolbar.controlsConfig`}</h2>\n    <p>{`This setting allow to customize some toolbar controls.`}</p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigblocktype\"\n    }}>{`toolbar.controlsConfig.blockType`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigblocktypeoptions\"\n    }}>{`toolbar.controlsConfig.blockType.options`}</h4>\n    <p>{`This allows you to set the available options.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        blockType: {\\n          options: [\\n            {\\n              value: \\'default\\',\\n              text: LANG_PREFIX + \\'controls.blockType.labels.normal\\',\\n            },\\n            {\\n              value: \\'header-one\\',\\n              text: LANG_PREFIX + \\'controls.blockType.labels.header1\\',\\n            },\\n            {\\n              value: \\'header-two\\',\\n              text: LANG_PREFIX + \\'controls.blockType.labels.header2\\',\\n            },\\n            {\\n              value: \\'header-three\\',\\n              text: LANG_PREFIX + \\'controls.blockType.labels.header3\\',\\n            },\\n            {\\n              value: \\'blockquote\\',\\n              text: \\'Quote\\',\\n            },\\n          ],\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              blockType: {\n                options: [{\n                  value: 'default',\n                  text: LANG_PREFIX + 'controls.blockType.labels.normal'\n                }, {\n                  value: 'header-one',\n                  text: LANG_PREFIX + 'controls.blockType.labels.header1'\n                }, {\n                  value: 'header-two',\n                  text: LANG_PREFIX + 'controls.blockType.labels.header2'\n                }, {\n                  value: 'header-three',\n                  text: LANG_PREFIX + 'controls.blockType.labels.header3'\n                }, {\n                  value: 'blockquote',\n                  text: 'Quote'\n                }]\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other options.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` property contains the draft block style. Built-in block styles: `}<inlineCode parentName=\"p\">{`'default'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-one'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-two'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-three'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-four'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-five'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-six'`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`'blockquote'`}</inlineCode></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` property contains the text that the user sees.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`LANG_PREFIX`}</inlineCode>{` constant in the example above tells to the editor to translate the text. For more information about translations go to: `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/lang\"\n      }}>{`lang section`}</a></p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigimage\"\n    }}>{`toolbar.controlsConfig.image`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigimageuploadcallback\"\n    }}>{`toolbar.controlsConfig.image.uploadCallback`}</h4>\n    <p>{`Function containing the logic when an image is uploaded.  Receives image `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/File\"\n      }}><inlineCode parentName=\"a\">{`File`}</inlineCode></a>{` object as parameter. It must return a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\n      }}><inlineCode parentName=\"a\">{`Promise`}</inlineCode></a>{` with the URL as `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{`.`}</p>\n    <p>{`By default the image is converted to base64.\nUse this option if you want upload to a server or doing something with it before is added to the editor.`}</p>\n    <Playground __position={5} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        image: {\\n          uploadCallback: file =>\\n            new Promise(function(resolve, reject) {\\n              if (file.size > 1000000) {\\n                reject(\\'The image is too big! Max size: 1mb\\')\\n              }\\n              // Here you can upload the image to a server for example,\\n              // grab the URL and return it with the resolve function\\n              resolve(\\'https://picsum.photos/200/300\\')\\n            }),\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              image: {\n                uploadCallback: file => new Promise(function (resolve, reject) {\n                  if (file.size > 1000000) {\n                    reject('The image is too big! Max size: 1mb');\n                  } // Here you can upload the image to a server for example,\n                  // grab the URL and return it with the resolve function\n\n\n                  resolve('https://picsum.photos/200/300');\n                })\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other logic.`}</p>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: This is only is applicable on the upload image option, it doesn't work on the URL option.`}</p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigfontcolor\"\n    }}>{`toolbar.controlsConfig.fontColor`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontcolorcolorsperrow\"\n    }}>{`toolbar.controlsConfig.fontColor.colorsPerRow`}</h4>\n    <p>{`This is the maximum number of color options that will be shown in a single row. By default `}<inlineCode parentName=\"p\">{`10`}</inlineCode>{`.`}</p>\n    <Playground __position={6} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontColor: {\\n          colorsPerRow: 30,\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontColor: {\n                colorsPerRow: 30\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other number.`}</p>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontcoloroptions\"\n    }}>{`toolbar.controlsConfig.fontColor.options`}</h4>\n    <p>{`This is and array with the available color list. In order to see the default value go to: `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/default-configuration\"\n      }}>{`Default configuration section`}</a>{`.`}</p>\n    <Playground __position={7} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontColor: {\\n          options: [\\n            { text: \\'black\\', value: \\'rgb(0, 0, 0)\\' },\\n            { text: \\'white\\', value: \\'rgb(255, 255, 255)\\' },\\n            { text: \\'red\\', value: \\'rgb(255, 0, 0)\\' },\\n            { text: \\'green\\', value: \\'rgb(0, 255, 0)\\' },\\n            { text: \\'blue\\', value: \\'rgb(0, 0, 255)\\' },\\n          ],\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontColor: {\n                options: [{\n                  text: 'black',\n                  value: 'rgb(0, 0, 0)'\n                }, {\n                  text: 'white',\n                  value: 'rgb(255, 255, 255)'\n                }, {\n                  text: 'red',\n                  value: 'rgb(255, 0, 0)'\n                }, {\n                  text: 'green',\n                  value: 'rgb(0, 255, 0)'\n                }, {\n                  text: 'blue',\n                  value: 'rgb(0, 0, 255)'\n                }]\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other colors.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` property contains the text shown in tooltip when the user moves the mouse over the color.\nThe `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` property contains the value of the color in rgb, hex or string (`}<inlineCode parentName=\"p\">{`black`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'red'`}</inlineCode>{`, etc.).`}</p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigfontbackgroundcolor\"\n    }}>{`toolbar.controlsConfig.fontBackgroundColor`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontbackgroundcolorcolorsperrow\"\n    }}>{`toolbar.controlsConfig.fontBackgroundColor.colorsPerRow`}</h4>\n    <p>{`This is the maximum number of color options that will be shown in a single row. By default `}<inlineCode parentName=\"p\">{`10`}</inlineCode>{`.`}</p>\n    <Playground __position={8} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontBackgroundColor: {\\n          colorsPerRow: 30,\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontBackgroundColor: {\n                colorsPerRow: 30\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other number.`}</p>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontbackgroundcoloroptions\"\n    }}>{`toolbar.controlsConfig.fontBackgroundColor.options`}</h4>\n    <p>{`This is and array with the available color list. In order to see the default value go to: `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/default-configuration\"\n      }}>{`Default configuration section`}</a>{`.`}</p>\n    <Playground __position={9} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontBackgroundColor: {\\n          options: [\\n            { text: \\'black\\', value: \\'rgb(0, 0, 0)\\' },\\n            { text: \\'white\\', value: \\'rgb(255, 255, 255)\\' },\\n            { text: \\'red\\', value: \\'rgb(255, 0, 0)\\' },\\n            { text: \\'green\\', value: \\'rgb(0, 255, 0)\\' },\\n            { text: \\'blue\\', value: \\'rgb(0, 0, 255)\\' },\\n          ],\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontBackgroundColor: {\n                options: [{\n                  text: 'black',\n                  value: 'rgb(0, 0, 0)'\n                }, {\n                  text: 'white',\n                  value: 'rgb(255, 255, 255)'\n                }, {\n                  text: 'red',\n                  value: 'rgb(255, 0, 0)'\n                }, {\n                  text: 'green',\n                  value: 'rgb(0, 255, 0)'\n                }, {\n                  text: 'blue',\n                  value: 'rgb(0, 0, 255)'\n                }]\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other colors.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` property contains the text shown in tooltip when the user moves the mouse over the color.\nThe `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` property contains the value of the color in rgb, hex or string (`}<inlineCode parentName=\"p\">{`black`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'red'`}</inlineCode>{`, etc.).`}</p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigfontsize\"\n    }}>{`toolbar.controlsConfig.fontSize`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontsizeoptions\"\n    }}>{`toolbar.controlsConfig.fontSize.options`}</h4>\n    <p>{`This is an array with the available sizes. In order to see the default value go to: `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/default-configuration\"\n      }}>{`Default configuration section`}</a>{`.`}</p>\n    <Playground __position={10} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontSize: {\\n          options: [\\n            \\'default\\',\\n            \\'4px\\',\\n            \\'8px\\',\\n            \\'12px\\',\\n            \\'24px\\',\\n            \\'36px\\',\\n            \\'60px\\',\\n            \\'72px\\',\\n            \\'96px\\',\\n          ],\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontSize: {\n                options: ['default', '4px', '8px', '12px', '24px', '36px', '60px', '72px', '96px']\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other font sizes.`}</p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigfontfamily\"\n    }}>{`toolbar.controlsConfig.fontFamily`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontfamilyoptions\"\n    }}>{`toolbar.controlsConfig.fontFamily.options`}</h4>\n    <p>{`This is an array with the available font families. In order to see the default value go to: `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/default-configuration\"\n      }}>{`Default configuration section`}</a>{`.`}</p>\n    <Playground __position={11} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontFamily: {\\n          options: [\\n            \\'default\\',\\n            \\'Arial\\',\\n            \\'Tahoma\\',\\n            \\'Times New Roman\\',\\n            \\'Impact\\',\\n          ],\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontFamily: {\n                options: ['default', 'Arial', 'Tahoma', 'Times New Roman', 'Impact']\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other font families.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}