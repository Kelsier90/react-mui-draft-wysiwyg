{"expireTime":9007200854582776000,"key":"gatsby-plugin-mdx-entire-payload-fe26db6c0c032af2c0015b426b0e96b4-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"D:/Documents/React Projects/components/react-mui-draft-wysiwyg/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":141,"offset":142},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":144},"end":{"line":5,"column":29,"offset":172},"indent":[]}},{"type":"import","value":"import { Playground } from \"docz\";\nimport MUIEditor, { MUIEditorState, toolbarControlTypes, LANG_PREFIX } from \"../../src\";","position":{"start":{"line":8,"column":1,"offset":175},"end":{"line":9,"column":89,"offset":298},"indent":[1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"toolbar","position":{"start":{"line":11,"column":3,"offset":302},"end":{"line":11,"column":10,"offset":309},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":300},"end":{"line":11,"column":10,"offset":309},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Toolbar settings.","position":{"start":{"line":13,"column":1,"offset":311},"end":{"line":13,"column":18,"offset":328},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":311},"end":{"line":13,"column":18,"offset":328},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"toolbar.className","position":{"start":{"line":15,"column":4,"offset":333},"end":{"line":15,"column":21,"offset":350},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":330},"end":{"line":15,"column":21,"offset":350},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The toolbar wrapper className prop.","position":{"start":{"line":17,"column":1,"offset":352},"end":{"line":17,"column":36,"offset":387},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":352},"end":{"line":17,"column":36,"offset":387},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"toolbar.style","position":{"start":{"line":19,"column":4,"offset":392},"end":{"line":19,"column":17,"offset":405},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":389},"end":{"line":19,"column":17,"offset":405},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The toolbar wrapper style prop.","position":{"start":{"line":21,"column":1,"offset":407},"end":{"line":21,"column":32,"offset":438},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":407},"end":{"line":21,"column":32,"offset":438},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        style: {\n          padding: 25,\n          background: '#50c1ae',\n        }\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":23,"column":1,"offset":440},"end":{"line":39,"column":14,"offset":875},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can edit the code above and try other styles.","position":{"start":{"line":41,"column":1,"offset":877},"end":{"line":41,"column":50,"offset":926},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":877},"end":{"line":41,"column":50,"offset":926},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"toolbar.visible","position":{"start":{"line":43,"column":4,"offset":931},"end":{"line":43,"column":19,"offset":946},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":928},"end":{"line":43,"column":19,"offset":946},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sets whether the toolbar is visible. It's ","position":{"start":{"line":45,"column":1,"offset":948},"end":{"line":45,"column":43,"offset":990},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":45,"column":43,"offset":990},"end":{"line":45,"column":49,"offset":996},"indent":[]}},{"type":"text","value":" by default.","position":{"start":{"line":45,"column":49,"offset":996},"end":{"line":45,"column":61,"offset":1008},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":948},"end":{"line":45,"column":61,"offset":1008},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        visible: false,\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":47,"column":1,"offset":1010},"end":{"line":60,"column":14,"offset":1386},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can edit the code above and change the toolbar visibility.","position":{"start":{"line":62,"column":1,"offset":1388},"end":{"line":62,"column":63,"offset":1450},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1388},"end":{"line":62,"column":63,"offset":1450},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"toolbar.position","position":{"start":{"line":64,"column":4,"offset":1455},"end":{"line":64,"column":20,"offset":1471},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":1452},"end":{"line":64,"column":20,"offset":1471},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sets the toolbar position: Top or bottom.","position":{"start":{"line":66,"column":1,"offset":1473},"end":{"line":66,"column":42,"offset":1514},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1473},"end":{"line":66,"column":42,"offset":1514},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Possible values: ","position":{"start":{"line":68,"column":1,"offset":1516},"end":{"line":68,"column":18,"offset":1533},"indent":[]}},{"type":"inlineCode","value":"'top'","position":{"start":{"line":68,"column":18,"offset":1533},"end":{"line":68,"column":25,"offset":1540},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":68,"column":25,"offset":1540},"end":{"line":68,"column":29,"offset":1544},"indent":[]}},{"type":"inlineCode","value":"'bottom'","position":{"start":{"line":68,"column":29,"offset":1544},"end":{"line":68,"column":39,"offset":1554},"indent":[]}},{"type":"text","value":". The default value is ","position":{"start":{"line":68,"column":39,"offset":1554},"end":{"line":68,"column":62,"offset":1577},"indent":[]}},{"type":"inlineCode","value":"'top'","position":{"start":{"line":68,"column":62,"offset":1577},"end":{"line":68,"column":69,"offset":1584},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":68,"column":69,"offset":1584},"end":{"line":68,"column":70,"offset":1585},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1516},"end":{"line":68,"column":70,"offset":1585},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        position: 'bottom',\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":70,"column":1,"offset":1587},"end":{"line":83,"column":14,"offset":1967},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can edit the code above and change the toolbar position.","position":{"start":{"line":85,"column":1,"offset":1969},"end":{"line":85,"column":61,"offset":2029},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":1969},"end":{"line":85,"column":61,"offset":2029},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"toolbar.controls","position":{"start":{"line":87,"column":4,"offset":2034},"end":{"line":87,"column":20,"offset":2050},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2031},"end":{"line":87,"column":20,"offset":2050},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Array that sets the toolbar controls. You can see the default controls on ","position":{"start":{"line":89,"column":1,"offset":2052},"end":{"line":89,"column":75,"offset":2126},"indent":[]}},{"type":"link","title":null,"url":"/configuration/default-configuration","children":[{"type":"text","value":"Default configuration section","position":{"start":{"line":89,"column":76,"offset":2127},"end":{"line":89,"column":105,"offset":2156},"indent":[]}}],"position":{"start":{"line":89,"column":75,"offset":2126},"end":{"line":89,"column":144,"offset":2195},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":89,"column":144,"offset":2195},"end":{"line":89,"column":145,"offset":2196},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2052},"end":{"line":89,"column":145,"offset":2196},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In order to add the built-in controls you have to import them:","position":{"start":{"line":91,"column":1,"offset":2198},"end":{"line":91,"column":63,"offset":2260},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2198},"end":{"line":91,"column":63,"offset":2260},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"import { toolbarControlTypes } from 'react-mui-draft-wysiwyg';","position":{"start":{"line":93,"column":1,"offset":2262},"end":{"line":95,"column":4,"offset":2335},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And pass them to ","position":{"start":{"line":97,"column":1,"offset":2337},"end":{"line":97,"column":18,"offset":2354},"indent":[]}},{"type":"inlineCode","value":"toolbar.controls","position":{"start":{"line":97,"column":18,"offset":2354},"end":{"line":97,"column":36,"offset":2372},"indent":[]}},{"type":"text","value":" option like this:","position":{"start":{"line":97,"column":36,"offset":2372},"end":{"line":97,"column":54,"offset":2390},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2337},"end":{"line":97,"column":54,"offset":2390},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        controls: [\n          toolbarControlTypes.bold,\n          toolbarControlTypes.italic,\n          toolbarControlTypes.underline,\n        ],\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":99,"column":1,"offset":2392},"end":{"line":116,"column":14,"offset":2890},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let's see all the available controls.","position":{"start":{"line":118,"column":1,"offset":2892},"end":{"line":118,"column":38,"offset":2929},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":2892},"end":{"line":118,"column":38,"offset":2929},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"undo","position":{"start":{"line":120,"column":5,"offset":2935},"end":{"line":120,"column":9,"offset":2939},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":2931},"end":{"line":120,"column":9,"offset":2939},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user undo the last change.","position":{"start":{"line":122,"column":1,"offset":2941},"end":{"line":122,"column":51,"offset":2991},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2941},"end":{"line":122,"column":51,"offset":2991},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.undo","position":{"start":{"line":124,"column":1,"offset":2993},"end":{"line":126,"column":4,"offset":3028},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"redo","position":{"start":{"line":128,"column":5,"offset":3034},"end":{"line":128,"column":9,"offset":3038},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":3030},"end":{"line":128,"column":9,"offset":3038},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user redo the last change.","position":{"start":{"line":130,"column":1,"offset":3040},"end":{"line":130,"column":51,"offset":3090},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":3040},"end":{"line":130,"column":51,"offset":3090},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.redo","position":{"start":{"line":132,"column":1,"offset":3092},"end":{"line":134,"column":4,"offset":3127},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"bold","position":{"start":{"line":136,"column":5,"offset":3133},"end":{"line":136,"column":9,"offset":3137},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":3129},"end":{"line":136,"column":9,"offset":3137},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user toggle bold style of the current selected text.","position":{"start":{"line":138,"column":1,"offset":3139},"end":{"line":138,"column":77,"offset":3215},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3139},"end":{"line":138,"column":77,"offset":3215},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.bold","position":{"start":{"line":140,"column":1,"offset":3217},"end":{"line":142,"column":4,"offset":3252},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"italic","position":{"start":{"line":144,"column":5,"offset":3258},"end":{"line":144,"column":11,"offset":3264},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":3254},"end":{"line":144,"column":11,"offset":3264},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user toggle italic style of the current selected text.","position":{"start":{"line":146,"column":1,"offset":3266},"end":{"line":146,"column":79,"offset":3344},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":3266},"end":{"line":146,"column":79,"offset":3344},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.italic","position":{"start":{"line":148,"column":1,"offset":3346},"end":{"line":150,"column":4,"offset":3383},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"underline","position":{"start":{"line":152,"column":5,"offset":3389},"end":{"line":152,"column":14,"offset":3398},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":3385},"end":{"line":152,"column":14,"offset":3398},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user toggle underline of the current selected text.","position":{"start":{"line":154,"column":1,"offset":3400},"end":{"line":154,"column":76,"offset":3475},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":3400},"end":{"line":154,"column":76,"offset":3475},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.underline","position":{"start":{"line":156,"column":1,"offset":3477},"end":{"line":158,"column":4,"offset":3517},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"strikethrough","position":{"start":{"line":160,"column":5,"offset":3523},"end":{"line":160,"column":18,"offset":3536},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":3519},"end":{"line":160,"column":18,"offset":3536},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user toggle strikethrough style of the current selected text.","position":{"start":{"line":162,"column":1,"offset":3538},"end":{"line":162,"column":86,"offset":3623},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":3538},"end":{"line":162,"column":86,"offset":3623},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.strikethrough","position":{"start":{"line":164,"column":1,"offset":3625},"end":{"line":166,"column":4,"offset":3669},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"fontColor","position":{"start":{"line":168,"column":5,"offset":3675},"end":{"line":168,"column":14,"offset":3684},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":3671},"end":{"line":168,"column":14,"offset":3684},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user change the font color of the current selected text.","position":{"start":{"line":170,"column":1,"offset":3686},"end":{"line":170,"column":81,"offset":3766},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":3686},"end":{"line":170,"column":81,"offset":3766},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.fontColor","position":{"start":{"line":172,"column":1,"offset":3768},"end":{"line":174,"column":4,"offset":3808},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"fontBackgroundColor","position":{"start":{"line":176,"column":5,"offset":3814},"end":{"line":176,"column":24,"offset":3833},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":3810},"end":{"line":176,"column":24,"offset":3833},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user change the font background color of the current selected text.","position":{"start":{"line":178,"column":1,"offset":3835},"end":{"line":178,"column":92,"offset":3926},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":3835},"end":{"line":178,"column":92,"offset":3926},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.fontBackgroundColor","position":{"start":{"line":180,"column":1,"offset":3928},"end":{"line":182,"column":4,"offset":3978},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"linkAdd","position":{"start":{"line":184,"column":5,"offset":3984},"end":{"line":184,"column":12,"offset":3991},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":3980},"end":{"line":184,"column":12,"offset":3991},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user add a link (URL) to the current selected text.","position":{"start":{"line":186,"column":1,"offset":3993},"end":{"line":186,"column":76,"offset":4068},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":3993},"end":{"line":186,"column":76,"offset":4068},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.linkAdd","position":{"start":{"line":188,"column":1,"offset":4070},"end":{"line":190,"column":4,"offset":4108},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"linkRemove","position":{"start":{"line":192,"column":5,"offset":4114},"end":{"line":192,"column":15,"offset":4124},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":4110},"end":{"line":192,"column":15,"offset":4124},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user remove all links of the current selected text.","position":{"start":{"line":194,"column":1,"offset":4126},"end":{"line":194,"column":76,"offset":4201},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":4126},"end":{"line":194,"column":76,"offset":4201},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.fontColor","position":{"start":{"line":196,"column":1,"offset":4203},"end":{"line":198,"column":4,"offset":4243},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"image","position":{"start":{"line":200,"column":5,"offset":4249},"end":{"line":200,"column":10,"offset":4254},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":4245},"end":{"line":200,"column":10,"offset":4254},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user add an image by uploading it or adding its URL.","position":{"start":{"line":202,"column":1,"offset":4256},"end":{"line":202,"column":77,"offset":4332},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":4256},"end":{"line":202,"column":77,"offset":4332},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.image","position":{"start":{"line":203,"column":1,"offset":4333},"end":{"line":205,"column":4,"offset":4369},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"blockType","position":{"start":{"line":208,"column":5,"offset":4376},"end":{"line":208,"column":14,"offset":4385},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":4372},"end":{"line":208,"column":14,"offset":4385},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user change the paragraph style (Header 1, Header 2, etc.).","position":{"start":{"line":210,"column":1,"offset":4387},"end":{"line":210,"column":84,"offset":4470},"indent":[]}}],"position":{"start":{"line":210,"column":1,"offset":4387},"end":{"line":210,"column":84,"offset":4470},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.blockType","position":{"start":{"line":212,"column":1,"offset":4472},"end":{"line":214,"column":4,"offset":4512},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"fontSize","position":{"start":{"line":216,"column":5,"offset":4518},"end":{"line":216,"column":13,"offset":4526},"indent":[]}}],"position":{"start":{"line":216,"column":1,"offset":4514},"end":{"line":216,"column":13,"offset":4526},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user change the font size of the selected text.","position":{"start":{"line":218,"column":1,"offset":4528},"end":{"line":218,"column":72,"offset":4599},"indent":[]}}],"position":{"start":{"line":218,"column":1,"offset":4528},"end":{"line":218,"column":72,"offset":4599},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.fontSize","position":{"start":{"line":220,"column":1,"offset":4601},"end":{"line":222,"column":4,"offset":4640},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"fontFamily","position":{"start":{"line":224,"column":5,"offset":4646},"end":{"line":224,"column":15,"offset":4656},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":4642},"end":{"line":224,"column":15,"offset":4656},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user change the font family (Arial, Sans Serif, etc) of the selected text.","position":{"start":{"line":226,"column":1,"offset":4658},"end":{"line":226,"column":99,"offset":4756},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":4658},"end":{"line":226,"column":99,"offset":4756},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.fontFamily","position":{"start":{"line":228,"column":1,"offset":4758},"end":{"line":230,"column":4,"offset":4799},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"textAlign","position":{"start":{"line":232,"column":5,"offset":4805},"end":{"line":232,"column":14,"offset":4814},"indent":[]}}],"position":{"start":{"line":232,"column":1,"offset":4801},"end":{"line":232,"column":14,"offset":4814},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user change text alignment (left, center, right and justify) of the selected paragraphs.","position":{"start":{"line":234,"column":1,"offset":4816},"end":{"line":234,"column":113,"offset":4928},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":4816},"end":{"line":234,"column":113,"offset":4928},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.textAlign","position":{"start":{"line":236,"column":1,"offset":4930},"end":{"line":238,"column":4,"offset":4970},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"unorderedList","position":{"start":{"line":240,"column":5,"offset":4976},"end":{"line":240,"column":18,"offset":4989},"indent":[]}}],"position":{"start":{"line":240,"column":1,"offset":4972},"end":{"line":240,"column":18,"offset":4989},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user start an unordered list of items.","position":{"start":{"line":242,"column":1,"offset":4991},"end":{"line":242,"column":63,"offset":5053},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":4991},"end":{"line":242,"column":63,"offset":5053},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.unorderedList","position":{"start":{"line":244,"column":1,"offset":5055},"end":{"line":246,"column":4,"offset":5099},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"orderedList","position":{"start":{"line":249,"column":5,"offset":5106},"end":{"line":249,"column":16,"offset":5117},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":5102},"end":{"line":249,"column":16,"offset":5117},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control allows the user start an ordered list of items.","position":{"start":{"line":251,"column":1,"offset":5119},"end":{"line":251,"column":61,"offset":5179},"indent":[]}}],"position":{"start":{"line":251,"column":1,"offset":5119},"end":{"line":251,"column":61,"offset":5179},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.orderedList","position":{"start":{"line":253,"column":1,"offset":5181},"end":{"line":255,"column":4,"offset":5223},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"divider","position":{"start":{"line":258,"column":5,"offset":5230},"end":{"line":258,"column":12,"offset":5237},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":5226},"end":{"line":258,"column":12,"offset":5237},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This control is purely cosmetic. Add a vertical line that allows you to separate the rest of the controls.","position":{"start":{"line":260,"column":1,"offset":5239},"end":{"line":260,"column":107,"offset":5345},"indent":[]}}],"position":{"start":{"line":260,"column":1,"offset":5239},"end":{"line":260,"column":107,"offset":5345},"indent":[]}},{"type":"code","lang":"jsx","meta":null,"value":"toolbarControlTypes.divider","position":{"start":{"line":262,"column":1,"offset":5347},"end":{"line":264,"column":4,"offset":5385},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"toolbar.controlsConfig","position":{"start":{"line":266,"column":4,"offset":5390},"end":{"line":266,"column":26,"offset":5412},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":5387},"end":{"line":266,"column":26,"offset":5412},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This setting allow to customize some toolbar controls.","position":{"start":{"line":268,"column":1,"offset":5414},"end":{"line":268,"column":55,"offset":5468},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":5414},"end":{"line":268,"column":55,"offset":5468},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"toolbar.controlsConfig.blockType","position":{"start":{"line":270,"column":5,"offset":5474},"end":{"line":270,"column":37,"offset":5506},"indent":[]}}],"position":{"start":{"line":270,"column":1,"offset":5470},"end":{"line":270,"column":37,"offset":5506},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"toolbar.controlsConfig.blockType.options","position":{"start":{"line":272,"column":6,"offset":5513},"end":{"line":272,"column":46,"offset":5553},"indent":[]}}],"position":{"start":{"line":272,"column":1,"offset":5508},"end":{"line":272,"column":46,"offset":5553},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This allows you to set the available options.","position":{"start":{"line":274,"column":1,"offset":5555},"end":{"line":274,"column":46,"offset":5600},"indent":[]}}],"position":{"start":{"line":274,"column":1,"offset":5555},"end":{"line":274,"column":46,"offset":5600},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        controlsConfig: {\n          blockType: {\n            options: [\n              {\n                value: 'default',\n                text: LANG_PREFIX + 'controls.blockType.labels.normal',\n              },\n              {\n                value: 'header-one',\n                text: LANG_PREFIX + 'controls.blockType.labels.header1',\n              },\n              {\n                value: 'header-two',\n                text: LANG_PREFIX + 'controls.blockType.labels.header2',\n              },\n              {\n                value: 'header-three',\n                text: LANG_PREFIX + 'controls.blockType.labels.header3',\n              },\n              {\n                value: 'blockquote',\n                text: 'Quote',\n              },\n            ],\n          }\n        },\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":276,"column":1,"offset":5602},"end":{"line":314,"column":14,"offset":6735},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can edit the code above and try other options.","position":{"start":{"line":316,"column":1,"offset":6737},"end":{"line":316,"column":51,"offset":6787},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":6737},"end":{"line":316,"column":51,"offset":6787},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":318,"column":1,"offset":6789},"end":{"line":318,"column":5,"offset":6793},"indent":[]}},{"type":"inlineCode","value":"value","position":{"start":{"line":318,"column":5,"offset":6793},"end":{"line":318,"column":12,"offset":6800},"indent":[]}},{"type":"text","value":" property contains the draft block style. Built-in block styles: ","position":{"start":{"line":318,"column":12,"offset":6800},"end":{"line":318,"column":77,"offset":6865},"indent":[]}},{"type":"inlineCode","value":"'default'","position":{"start":{"line":318,"column":77,"offset":6865},"end":{"line":318,"column":88,"offset":6876},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":318,"column":88,"offset":6876},"end":{"line":318,"column":90,"offset":6878},"indent":[]}},{"type":"inlineCode","value":"'header-one'","position":{"start":{"line":318,"column":90,"offset":6878},"end":{"line":318,"column":104,"offset":6892},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":318,"column":104,"offset":6892},"end":{"line":318,"column":106,"offset":6894},"indent":[]}},{"type":"inlineCode","value":"'header-two'","position":{"start":{"line":318,"column":106,"offset":6894},"end":{"line":318,"column":120,"offset":6908},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":318,"column":120,"offset":6908},"end":{"line":318,"column":122,"offset":6910},"indent":[]}},{"type":"inlineCode","value":"'header-three'","position":{"start":{"line":318,"column":122,"offset":6910},"end":{"line":318,"column":138,"offset":6926},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":318,"column":138,"offset":6926},"end":{"line":318,"column":140,"offset":6928},"indent":[]}},{"type":"inlineCode","value":"'header-four'","position":{"start":{"line":318,"column":140,"offset":6928},"end":{"line":318,"column":155,"offset":6943},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":318,"column":155,"offset":6943},"end":{"line":318,"column":157,"offset":6945},"indent":[]}},{"type":"inlineCode","value":"'header-five'","position":{"start":{"line":318,"column":157,"offset":6945},"end":{"line":318,"column":172,"offset":6960},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":318,"column":172,"offset":6960},"end":{"line":318,"column":174,"offset":6962},"indent":[]}},{"type":"inlineCode","value":"'header-six'","position":{"start":{"line":318,"column":174,"offset":6962},"end":{"line":318,"column":188,"offset":6976},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":318,"column":188,"offset":6976},"end":{"line":318,"column":193,"offset":6981},"indent":[]}},{"type":"inlineCode","value":"'blockquote'","position":{"start":{"line":318,"column":193,"offset":6981},"end":{"line":318,"column":207,"offset":6995},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":6789},"end":{"line":318,"column":207,"offset":6995},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":320,"column":1,"offset":6997},"end":{"line":320,"column":5,"offset":7001},"indent":[]}},{"type":"inlineCode","value":"text","position":{"start":{"line":320,"column":5,"offset":7001},"end":{"line":320,"column":11,"offset":7007},"indent":[]}},{"type":"text","value":" property contains the text that the user sees.","position":{"start":{"line":320,"column":11,"offset":7007},"end":{"line":320,"column":58,"offset":7054},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":6997},"end":{"line":320,"column":58,"offset":7054},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":322,"column":1,"offset":7056},"end":{"line":322,"column":5,"offset":7060},"indent":[]}},{"type":"inlineCode","value":"LANG_PREFIX","position":{"start":{"line":322,"column":5,"offset":7060},"end":{"line":322,"column":18,"offset":7073},"indent":[]}},{"type":"text","value":" constant in the example above tells to the editor to translate the text. For more information about translations go to: ","position":{"start":{"line":322,"column":18,"offset":7073},"end":{"line":322,"column":139,"offset":7194},"indent":[]}},{"type":"link","title":null,"url":"/configuration/lang","children":[{"type":"text","value":"lang section","position":{"start":{"line":322,"column":140,"offset":7195},"end":{"line":322,"column":152,"offset":7207},"indent":[]}}],"position":{"start":{"line":322,"column":139,"offset":7194},"end":{"line":322,"column":174,"offset":7229},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":7056},"end":{"line":322,"column":174,"offset":7229},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"toolbar.controlsConfig.image","position":{"start":{"line":324,"column":5,"offset":7235},"end":{"line":324,"column":33,"offset":7263},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":7231},"end":{"line":324,"column":33,"offset":7263},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"toolbar.controlsConfig.image.uploadCallback","position":{"start":{"line":326,"column":6,"offset":7270},"end":{"line":326,"column":49,"offset":7313},"indent":[]}}],"position":{"start":{"line":326,"column":1,"offset":7265},"end":{"line":326,"column":49,"offset":7313},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Function containing the logic when an image is uploaded.  Receives image ","position":{"start":{"line":328,"column":1,"offset":7315},"end":{"line":328,"column":74,"offset":7388},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/File","children":[{"type":"inlineCode","value":"File","position":{"start":{"line":328,"column":75,"offset":7389},"end":{"line":328,"column":81,"offset":7395},"indent":[]}}],"position":{"start":{"line":328,"column":74,"offset":7388},"end":{"line":328,"column":137,"offset":7451},"indent":[]}},{"type":"text","value":" object as parameter. It must return a ","position":{"start":{"line":328,"column":137,"offset":7451},"end":{"line":328,"column":176,"offset":7490},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise","children":[{"type":"inlineCode","value":"Promise","position":{"start":{"line":328,"column":177,"offset":7491},"end":{"line":328,"column":186,"offset":7500},"indent":[]}}],"position":{"start":{"line":328,"column":176,"offset":7490},"end":{"line":328,"column":277,"offset":7591},"indent":[]}},{"type":"text","value":" with the URL as ","position":{"start":{"line":328,"column":277,"offset":7591},"end":{"line":328,"column":294,"offset":7608},"indent":[]}},{"type":"inlineCode","value":"string","position":{"start":{"line":328,"column":294,"offset":7608},"end":{"line":328,"column":302,"offset":7616},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":328,"column":302,"offset":7616},"end":{"line":328,"column":303,"offset":7617},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":7315},"end":{"line":328,"column":303,"offset":7617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default the image is converted to base64.\nUse this option if you want upload to a server or doing something with it before is added to the editor.","position":{"start":{"line":330,"column":1,"offset":7619},"end":{"line":331,"column":105,"offset":7768},"indent":[1]}}],"position":{"start":{"line":330,"column":1,"offset":7619},"end":{"line":331,"column":105,"offset":7768},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        controlsConfig: {\n          image: {\n            uploadCallback: (file) => new Promise(function(resolve, reject) {\n              if (file.size > 1000000) {\n                reject('The image is too big! Max size: 1mb');\n              }\n              // Here you can upload the image to a server for example,\n              // grab the URL and return it with the resolve function\n              resolve('https://picsum.photos/200/300');\n            }),\n          }\n        }\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":333,"column":1,"offset":7770},"end":{"line":357,"column":14,"offset":8601},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can edit the code above and try other logic.","position":{"start":{"line":359,"column":1,"offset":8603},"end":{"line":359,"column":49,"offset":8651},"indent":[]}}],"position":{"start":{"line":359,"column":1,"offset":8603},"end":{"line":359,"column":49,"offset":8651},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note","position":{"start":{"line":361,"column":3,"offset":8655},"end":{"line":361,"column":7,"offset":8659},"indent":[]}}],"position":{"start":{"line":361,"column":1,"offset":8653},"end":{"line":361,"column":9,"offset":8661},"indent":[]}},{"type":"text","value":": This is only is applicable on the upload image option, it doesn't work on the URL option.","position":{"start":{"line":361,"column":9,"offset":8661},"end":{"line":361,"column":100,"offset":8752},"indent":[]}}],"position":{"start":{"line":361,"column":1,"offset":8653},"end":{"line":361,"column":100,"offset":8752},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"toolbar.controlsConfig.fontColor","position":{"start":{"line":363,"column":5,"offset":8758},"end":{"line":363,"column":37,"offset":8790},"indent":[]}}],"position":{"start":{"line":363,"column":1,"offset":8754},"end":{"line":363,"column":37,"offset":8790},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"toolbar.controlsConfig.fontColor.colorsPerRow","position":{"start":{"line":365,"column":6,"offset":8797},"end":{"line":365,"column":51,"offset":8842},"indent":[]}}],"position":{"start":{"line":365,"column":1,"offset":8792},"end":{"line":365,"column":51,"offset":8842},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is the maximum number of color options that will be shown in a single row. By default ","position":{"start":{"line":367,"column":1,"offset":8844},"end":{"line":367,"column":92,"offset":8935},"indent":[]}},{"type":"inlineCode","value":"10","position":{"start":{"line":367,"column":92,"offset":8935},"end":{"line":367,"column":96,"offset":8939},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":367,"column":96,"offset":8939},"end":{"line":367,"column":97,"offset":8940},"indent":[]}}],"position":{"start":{"line":367,"column":1,"offset":8844},"end":{"line":367,"column":97,"offset":8940},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        controlsConfig: {\n          fontColor: {\n            colorsPerRow: 30,\n          },\n        }\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":369,"column":1,"offset":8942},"end":{"line":386,"column":14,"offset":9396},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can edit the code above and try other number.","position":{"start":{"line":388,"column":1,"offset":9398},"end":{"line":388,"column":50,"offset":9447},"indent":[]}}],"position":{"start":{"line":388,"column":1,"offset":9398},"end":{"line":388,"column":50,"offset":9447},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"toolbar.controlsConfig.fontColor.options","position":{"start":{"line":390,"column":6,"offset":9454},"end":{"line":390,"column":46,"offset":9494},"indent":[]}}],"position":{"start":{"line":390,"column":1,"offset":9449},"end":{"line":390,"column":46,"offset":9494},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is and array with the available color list. In order to see the default value go to: ","position":{"start":{"line":392,"column":1,"offset":9496},"end":{"line":392,"column":91,"offset":9586},"indent":[]}},{"type":"link","title":null,"url":"/configuration/default-configuration","children":[{"type":"text","value":"Default configuration section","position":{"start":{"line":392,"column":92,"offset":9587},"end":{"line":392,"column":121,"offset":9616},"indent":[]}}],"position":{"start":{"line":392,"column":91,"offset":9586},"end":{"line":392,"column":160,"offset":9655},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":392,"column":160,"offset":9655},"end":{"line":392,"column":161,"offset":9656},"indent":[]}}],"position":{"start":{"line":392,"column":1,"offset":9496},"end":{"line":392,"column":161,"offset":9656},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        controlsConfig: {\n          fontColor: {\n            options: [\n              { text: 'black', value: 'rgb(0, 0, 0)' },\n              { text: 'white', value: 'rgb(255, 255, 255)' },\n              { text: 'red', value: 'rgb(255, 0, 0)' },\n              { text: 'green', value: 'rgb(0, 255, 0)' },\n              { text: 'blue', value: 'rgb(0, 0, 255)' },\n            ],\n          },\n        }\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":394,"column":1,"offset":9658},"end":{"line":417,"column":14,"offset":10409},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can edit the code above and try other colors.","position":{"start":{"line":419,"column":1,"offset":10411},"end":{"line":419,"column":50,"offset":10460},"indent":[]}}],"position":{"start":{"line":419,"column":1,"offset":10411},"end":{"line":419,"column":50,"offset":10460},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":421,"column":1,"offset":10462},"end":{"line":421,"column":5,"offset":10466},"indent":[]}},{"type":"inlineCode","value":"text","position":{"start":{"line":421,"column":5,"offset":10466},"end":{"line":421,"column":11,"offset":10472},"indent":[]}},{"type":"text","value":" property contains the text shown in tooltip when the user moves the mouse over the color.\nThe ","position":{"start":{"line":421,"column":11,"offset":10472},"end":{"line":422,"column":5,"offset":10567},"indent":[1]}},{"type":"inlineCode","value":"value","position":{"start":{"line":422,"column":5,"offset":10567},"end":{"line":422,"column":12,"offset":10574},"indent":[]}},{"type":"text","value":" property contains the value of the color in rgb, hex or string (","position":{"start":{"line":422,"column":12,"offset":10574},"end":{"line":422,"column":77,"offset":10639},"indent":[]}},{"type":"inlineCode","value":"black","position":{"start":{"line":422,"column":77,"offset":10639},"end":{"line":422,"column":86,"offset":10648},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":422,"column":86,"offset":10648},"end":{"line":422,"column":88,"offset":10650},"indent":[]}},{"type":"inlineCode","value":"'red'","position":{"start":{"line":422,"column":88,"offset":10650},"end":{"line":422,"column":95,"offset":10657},"indent":[]}},{"type":"text","value":", etc.).","position":{"start":{"line":422,"column":95,"offset":10657},"end":{"line":422,"column":103,"offset":10665},"indent":[]}}],"position":{"start":{"line":421,"column":1,"offset":10462},"end":{"line":422,"column":103,"offset":10665},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"toolbar.controlsConfig.fontBackgroundColor","position":{"start":{"line":424,"column":5,"offset":10671},"end":{"line":424,"column":47,"offset":10713},"indent":[]}}],"position":{"start":{"line":424,"column":1,"offset":10667},"end":{"line":424,"column":47,"offset":10713},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"toolbar.controlsConfig.fontBackgroundColor.colorsPerRow","position":{"start":{"line":426,"column":6,"offset":10720},"end":{"line":426,"column":61,"offset":10775},"indent":[]}}],"position":{"start":{"line":426,"column":1,"offset":10715},"end":{"line":426,"column":61,"offset":10775},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is the maximum number of color options that will be shown in a single row. By default ","position":{"start":{"line":428,"column":1,"offset":10777},"end":{"line":428,"column":92,"offset":10868},"indent":[]}},{"type":"inlineCode","value":"10","position":{"start":{"line":428,"column":92,"offset":10868},"end":{"line":428,"column":96,"offset":10872},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":428,"column":96,"offset":10872},"end":{"line":428,"column":97,"offset":10873},"indent":[]}}],"position":{"start":{"line":428,"column":1,"offset":10777},"end":{"line":428,"column":97,"offset":10873},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        controlsConfig: {\n          fontBackgroundColor: {\n            colorsPerRow: 30,\n          },\n        }\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":430,"column":1,"offset":10875},"end":{"line":447,"column":14,"offset":11339},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can edit the code above and try other number.","position":{"start":{"line":449,"column":1,"offset":11341},"end":{"line":449,"column":50,"offset":11390},"indent":[]}}],"position":{"start":{"line":449,"column":1,"offset":11341},"end":{"line":449,"column":50,"offset":11390},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"toolbar.controlsConfig.fontBackgroundColor.options","position":{"start":{"line":451,"column":6,"offset":11397},"end":{"line":451,"column":56,"offset":11447},"indent":[]}}],"position":{"start":{"line":451,"column":1,"offset":11392},"end":{"line":451,"column":56,"offset":11447},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is and array with the available color list. In order to see the default value go to: ","position":{"start":{"line":453,"column":1,"offset":11449},"end":{"line":453,"column":91,"offset":11539},"indent":[]}},{"type":"link","title":null,"url":"/configuration/default-configuration","children":[{"type":"text","value":"Default configuration section","position":{"start":{"line":453,"column":92,"offset":11540},"end":{"line":453,"column":121,"offset":11569},"indent":[]}}],"position":{"start":{"line":453,"column":91,"offset":11539},"end":{"line":453,"column":160,"offset":11608},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":453,"column":160,"offset":11608},"end":{"line":453,"column":161,"offset":11609},"indent":[]}}],"position":{"start":{"line":453,"column":1,"offset":11449},"end":{"line":453,"column":161,"offset":11609},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        controlsConfig: {\n          fontBackgroundColor: {\n            options: [\n              { text: 'black', value: 'rgb(0, 0, 0)' },\n              { text: 'white', value: 'rgb(255, 255, 255)' },\n              { text: 'red', value: 'rgb(255, 0, 0)' },\n              { text: 'green', value: 'rgb(0, 255, 0)' },\n              { text: 'blue', value: 'rgb(0, 0, 255)' },\n            ],\n          },\n        }\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":455,"column":1,"offset":11611},"end":{"line":478,"column":14,"offset":12372},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can edit the code above and try other colors.","position":{"start":{"line":480,"column":1,"offset":12374},"end":{"line":480,"column":50,"offset":12423},"indent":[]}}],"position":{"start":{"line":480,"column":1,"offset":12374},"end":{"line":480,"column":50,"offset":12423},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":482,"column":1,"offset":12425},"end":{"line":482,"column":5,"offset":12429},"indent":[]}},{"type":"inlineCode","value":"text","position":{"start":{"line":482,"column":5,"offset":12429},"end":{"line":482,"column":11,"offset":12435},"indent":[]}},{"type":"text","value":" property contains the text shown in tooltip when the user moves the mouse over the color.\nThe ","position":{"start":{"line":482,"column":11,"offset":12435},"end":{"line":483,"column":5,"offset":12530},"indent":[1]}},{"type":"inlineCode","value":"value","position":{"start":{"line":483,"column":5,"offset":12530},"end":{"line":483,"column":12,"offset":12537},"indent":[]}},{"type":"text","value":" property contains the value of the color in rgb, hex or string (","position":{"start":{"line":483,"column":12,"offset":12537},"end":{"line":483,"column":77,"offset":12602},"indent":[]}},{"type":"inlineCode","value":"black","position":{"start":{"line":483,"column":77,"offset":12602},"end":{"line":483,"column":86,"offset":12611},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":483,"column":86,"offset":12611},"end":{"line":483,"column":88,"offset":12613},"indent":[]}},{"type":"inlineCode","value":"'red'","position":{"start":{"line":483,"column":88,"offset":12613},"end":{"line":483,"column":95,"offset":12620},"indent":[]}},{"type":"text","value":", etc.).","position":{"start":{"line":483,"column":95,"offset":12620},"end":{"line":483,"column":103,"offset":12628},"indent":[]}}],"position":{"start":{"line":482,"column":1,"offset":12425},"end":{"line":483,"column":103,"offset":12628},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"toolbar.controlsConfig.fontSize","position":{"start":{"line":485,"column":5,"offset":12634},"end":{"line":485,"column":36,"offset":12665},"indent":[]}}],"position":{"start":{"line":485,"column":1,"offset":12630},"end":{"line":485,"column":36,"offset":12665},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"toolbar.controlsConfig.fontSize.options","position":{"start":{"line":487,"column":6,"offset":12672},"end":{"line":487,"column":45,"offset":12711},"indent":[]}}],"position":{"start":{"line":487,"column":1,"offset":12667},"end":{"line":487,"column":45,"offset":12711},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is an array with the available sizes. In order to see the default value go to: ","position":{"start":{"line":489,"column":1,"offset":12713},"end":{"line":489,"column":85,"offset":12797},"indent":[]}},{"type":"link","title":null,"url":"/configuration/default-configuration","children":[{"type":"text","value":"Default configuration section","position":{"start":{"line":489,"column":86,"offset":12798},"end":{"line":489,"column":115,"offset":12827},"indent":[]}}],"position":{"start":{"line":489,"column":85,"offset":12797},"end":{"line":489,"column":154,"offset":12866},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":489,"column":154,"offset":12866},"end":{"line":489,"column":155,"offset":12867},"indent":[]}}],"position":{"start":{"line":489,"column":1,"offset":12713},"end":{"line":489,"column":155,"offset":12867},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        controlsConfig: {\n          fontSize: {\n            options: [\n              'default',\n              '4px',\n              '8px',\n              '12px',\n              '24px',\n              '36px',\n              '60px',\n              '72px',\n              '96px',\n            ],\n          },\n        }\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":491,"column":1,"offset":12869},"end":{"line":518,"column":14,"offset":13529},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can edit the code above and try other font sizes.","position":{"start":{"line":520,"column":1,"offset":13531},"end":{"line":520,"column":54,"offset":13584},"indent":[]}}],"position":{"start":{"line":520,"column":1,"offset":13531},"end":{"line":520,"column":54,"offset":13584},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"toolbar.controlsConfig.fontFamily","position":{"start":{"line":522,"column":5,"offset":13590},"end":{"line":522,"column":38,"offset":13623},"indent":[]}}],"position":{"start":{"line":522,"column":1,"offset":13586},"end":{"line":522,"column":38,"offset":13623},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"toolbar.controlsConfig.fontFamily.options","position":{"start":{"line":524,"column":6,"offset":13630},"end":{"line":524,"column":47,"offset":13671},"indent":[]}}],"position":{"start":{"line":524,"column":1,"offset":13625},"end":{"line":524,"column":47,"offset":13671},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is an array with the available font families. In order to see the default value go to: ","position":{"start":{"line":526,"column":1,"offset":13673},"end":{"line":526,"column":93,"offset":13765},"indent":[]}},{"type":"link","title":null,"url":"/configuration/default-configuration","children":[{"type":"text","value":"Default configuration section","position":{"start":{"line":526,"column":94,"offset":13766},"end":{"line":526,"column":123,"offset":13795},"indent":[]}}],"position":{"start":{"line":526,"column":93,"offset":13765},"end":{"line":526,"column":162,"offset":13834},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":526,"column":162,"offset":13834},"end":{"line":526,"column":163,"offset":13835},"indent":[]}}],"position":{"start":{"line":526,"column":1,"offset":13673},"end":{"line":526,"column":163,"offset":13835},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const config = {\n      toolbar: {\n        controlsConfig: {\n          fontFamily: {\n            options: [\n              'default',\n              'Arial',\n              'Tahoma',\n              'Times New Roman',\n              'Impact',\n            ],\n          },\n        }\n      },\n    };\n    const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config))\n    const onChange = (newState) => {\n      setEditorState(newState)\n    }\n    return (<MUIEditor editorState={editorState} onChange={onChange} config={config} />)\n  }}\n</Playground>","position":{"start":{"line":528,"column":1,"offset":13837},"end":{"line":551,"column":14,"offset":14429},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can edit the code above and try other font families.","position":{"start":{"line":553,"column":1,"offset":14431},"end":{"line":553,"column":57,"offset":14487},"indent":[]}}],"position":{"start":{"line":553,"column":1,"offset":14431},"end":{"line":553,"column":57,"offset":14487},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":556,"column":1,"offset":14490},"end":{"line":556,"column":31,"offset":14520},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":556,"column":31,"offset":14520}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"D:/Documents/React Projects/components/react-mui-draft-wysiwyg/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground } from \"docz\";\nimport MUIEditor, { MUIEditorState, toolbarControlTypes, LANG_PREFIX } from \"../../src\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"toolbar\"\n    }}>{`toolbar`}</h1>\n    <p>{`Toolbar settings.`}</p>\n    <h2 {...{\n      \"id\": \"toolbarclassname\"\n    }}>{`toolbar.className`}</h2>\n    <p>{`The toolbar wrapper className prop.`}</p>\n    <h2 {...{\n      \"id\": \"toolbarstyle\"\n    }}>{`toolbar.style`}</h2>\n    <p>{`The toolbar wrapper style prop.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      style: {\\n        padding: 25,\\n        background: \\'#50c1ae\\',\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            style: {\n              padding: 25,\n              background: '#50c1ae'\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other styles.`}</p>\n    <h2 {...{\n      \"id\": \"toolbarvisible\"\n    }}>{`toolbar.visible`}</h2>\n    <p>{`Sets whether the toolbar is visible. It's `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` by default.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      visible: false,\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            visible: false\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and change the toolbar visibility.`}</p>\n    <h2 {...{\n      \"id\": \"toolbarposition\"\n    }}>{`toolbar.position`}</h2>\n    <p>{`Sets the toolbar position: Top or bottom.`}</p>\n    <p>{`Possible values: `}<inlineCode parentName=\"p\">{`'top'`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`'bottom'`}</inlineCode>{`. The default value is `}<inlineCode parentName=\"p\">{`'top'`}</inlineCode>{`.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      position: \\'bottom\\',\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            position: 'bottom'\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and change the toolbar position.`}</p>\n    <h2 {...{\n      \"id\": \"toolbarcontrols\"\n    }}>{`toolbar.controls`}</h2>\n    <p>{`Array that sets the toolbar controls. You can see the default controls on `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/default-configuration\"\n      }}>{`Default configuration section`}</a>{`.`}</p>\n    <p>{`In order to add the built-in controls you have to import them:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { toolbarControlTypes } from 'react-mui-draft-wysiwyg';\n`}</code></pre>\n    <p>{`And pass them to `}<inlineCode parentName=\"p\">{`toolbar.controls`}</inlineCode>{` option like this:`}</p>\n    <Playground __position={3} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controls: [\\n        toolbarControlTypes.bold,\\n        toolbarControlTypes.italic,\\n        toolbarControlTypes.underline,\\n      ],\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controls: [toolbarControlTypes.bold, toolbarControlTypes.italic, toolbarControlTypes.underline]\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`Let's see all the available controls.`}</p>\n    <h3 {...{\n      \"id\": \"undo\"\n    }}>{`undo`}</h3>\n    <p>{`This control allows the user undo the last change.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.undo\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"redo\"\n    }}>{`redo`}</h3>\n    <p>{`This control allows the user redo the last change.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.redo\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"bold\"\n    }}>{`bold`}</h3>\n    <p>{`This control allows the user toggle bold style of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.bold\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"italic\"\n    }}>{`italic`}</h3>\n    <p>{`This control allows the user toggle italic style of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.italic\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"underline\"\n    }}>{`underline`}</h3>\n    <p>{`This control allows the user toggle underline of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.underline\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"strikethrough\"\n    }}>{`strikethrough`}</h3>\n    <p>{`This control allows the user toggle strikethrough style of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.strikethrough\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fontcolor\"\n    }}>{`fontColor`}</h3>\n    <p>{`This control allows the user change the font color of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.fontColor\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fontbackgroundcolor\"\n    }}>{`fontBackgroundColor`}</h3>\n    <p>{`This control allows the user change the font background color of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.fontBackgroundColor\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"linkadd\"\n    }}>{`linkAdd`}</h3>\n    <p>{`This control allows the user add a link (URL) to the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.linkAdd\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"linkremove\"\n    }}>{`linkRemove`}</h3>\n    <p>{`This control allows the user remove all links of the current selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.fontColor\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"image\"\n    }}>{`image`}</h3>\n    <p>{`This control allows the user add an image by uploading it or adding its URL.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.image\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"blocktype\"\n    }}>{`blockType`}</h3>\n    <p>{`This control allows the user change the paragraph style (Header 1, Header 2, etc.).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.blockType\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fontsize\"\n    }}>{`fontSize`}</h3>\n    <p>{`This control allows the user change the font size of the selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.fontSize\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fontfamily\"\n    }}>{`fontFamily`}</h3>\n    <p>{`This control allows the user change the font family (Arial, Sans Serif, etc) of the selected text.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.fontFamily\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"textalign\"\n    }}>{`textAlign`}</h3>\n    <p>{`This control allows the user change text alignment (left, center, right and justify) of the selected paragraphs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.textAlign\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"unorderedlist\"\n    }}>{`unorderedList`}</h3>\n    <p>{`This control allows the user start an unordered list of items.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.unorderedList\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"orderedlist\"\n    }}>{`orderedList`}</h3>\n    <p>{`This control allows the user start an ordered list of items.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.orderedList\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"divider\"\n    }}>{`divider`}</h3>\n    <p>{`This control is purely cosmetic. Add a vertical line that allows you to separate the rest of the controls.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`toolbarControlTypes.divider\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"toolbarcontrolsconfig\"\n    }}>{`toolbar.controlsConfig`}</h2>\n    <p>{`This setting allow to customize some toolbar controls.`}</p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigblocktype\"\n    }}>{`toolbar.controlsConfig.blockType`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigblocktypeoptions\"\n    }}>{`toolbar.controlsConfig.blockType.options`}</h4>\n    <p>{`This allows you to set the available options.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        blockType: {\\n          options: [\\n            {\\n              value: \\'default\\',\\n              text: LANG_PREFIX + \\'controls.blockType.labels.normal\\',\\n            },\\n            {\\n              value: \\'header-one\\',\\n              text: LANG_PREFIX + \\'controls.blockType.labels.header1\\',\\n            },\\n            {\\n              value: \\'header-two\\',\\n              text: LANG_PREFIX + \\'controls.blockType.labels.header2\\',\\n            },\\n            {\\n              value: \\'header-three\\',\\n              text: LANG_PREFIX + \\'controls.blockType.labels.header3\\',\\n            },\\n            {\\n              value: \\'blockquote\\',\\n              text: \\'Quote\\',\\n            },\\n          ],\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              blockType: {\n                options: [{\n                  value: 'default',\n                  text: LANG_PREFIX + 'controls.blockType.labels.normal'\n                }, {\n                  value: 'header-one',\n                  text: LANG_PREFIX + 'controls.blockType.labels.header1'\n                }, {\n                  value: 'header-two',\n                  text: LANG_PREFIX + 'controls.blockType.labels.header2'\n                }, {\n                  value: 'header-three',\n                  text: LANG_PREFIX + 'controls.blockType.labels.header3'\n                }, {\n                  value: 'blockquote',\n                  text: 'Quote'\n                }]\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other options.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` property contains the draft block style. Built-in block styles: `}<inlineCode parentName=\"p\">{`'default'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-one'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-two'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-three'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-four'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-five'`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'header-six'`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`'blockquote'`}</inlineCode></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` property contains the text that the user sees.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`LANG_PREFIX`}</inlineCode>{` constant in the example above tells to the editor to translate the text. For more information about translations go to: `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/lang\"\n      }}>{`lang section`}</a></p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigimage\"\n    }}>{`toolbar.controlsConfig.image`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigimageuploadcallback\"\n    }}>{`toolbar.controlsConfig.image.uploadCallback`}</h4>\n    <p>{`Function containing the logic when an image is uploaded.  Receives image `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/File\"\n      }}><inlineCode parentName=\"a\">{`File`}</inlineCode></a>{` object as parameter. It must return a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\n      }}><inlineCode parentName=\"a\">{`Promise`}</inlineCode></a>{` with the URL as `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{`.`}</p>\n    <p>{`By default the image is converted to base64.\nUse this option if you want upload to a server or doing something with it before is added to the editor.`}</p>\n    <Playground __position={5} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        image: {\\n          uploadCallback: file =>\\n            new Promise(function(resolve, reject) {\\n              if (file.size > 1000000) {\\n                reject(\\'The image is too big! Max size: 1mb\\')\\n              }\\n              // Here you can upload the image to a server for example,\\n              // grab the URL and return it with the resolve function\\n              resolve(\\'https://picsum.photos/200/300\\')\\n            }),\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              image: {\n                uploadCallback: file => new Promise(function (resolve, reject) {\n                  if (file.size > 1000000) {\n                    reject('The image is too big! Max size: 1mb');\n                  } // Here you can upload the image to a server for example,\n                  // grab the URL and return it with the resolve function\n\n\n                  resolve('https://picsum.photos/200/300');\n                })\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other logic.`}</p>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: This is only is applicable on the upload image option, it doesn't work on the URL option.`}</p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigfontcolor\"\n    }}>{`toolbar.controlsConfig.fontColor`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontcolorcolorsperrow\"\n    }}>{`toolbar.controlsConfig.fontColor.colorsPerRow`}</h4>\n    <p>{`This is the maximum number of color options that will be shown in a single row. By default `}<inlineCode parentName=\"p\">{`10`}</inlineCode>{`.`}</p>\n    <Playground __position={6} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontColor: {\\n          colorsPerRow: 30,\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontColor: {\n                colorsPerRow: 30\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other number.`}</p>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontcoloroptions\"\n    }}>{`toolbar.controlsConfig.fontColor.options`}</h4>\n    <p>{`This is and array with the available color list. In order to see the default value go to: `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/default-configuration\"\n      }}>{`Default configuration section`}</a>{`.`}</p>\n    <Playground __position={7} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontColor: {\\n          options: [\\n            { text: \\'black\\', value: \\'rgb(0, 0, 0)\\' },\\n            { text: \\'white\\', value: \\'rgb(255, 255, 255)\\' },\\n            { text: \\'red\\', value: \\'rgb(255, 0, 0)\\' },\\n            { text: \\'green\\', value: \\'rgb(0, 255, 0)\\' },\\n            { text: \\'blue\\', value: \\'rgb(0, 0, 255)\\' },\\n          ],\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontColor: {\n                options: [{\n                  text: 'black',\n                  value: 'rgb(0, 0, 0)'\n                }, {\n                  text: 'white',\n                  value: 'rgb(255, 255, 255)'\n                }, {\n                  text: 'red',\n                  value: 'rgb(255, 0, 0)'\n                }, {\n                  text: 'green',\n                  value: 'rgb(0, 255, 0)'\n                }, {\n                  text: 'blue',\n                  value: 'rgb(0, 0, 255)'\n                }]\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other colors.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` property contains the text shown in tooltip when the user moves the mouse over the color.\nThe `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` property contains the value of the color in rgb, hex or string (`}<inlineCode parentName=\"p\">{`black`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'red'`}</inlineCode>{`, etc.).`}</p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigfontbackgroundcolor\"\n    }}>{`toolbar.controlsConfig.fontBackgroundColor`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontbackgroundcolorcolorsperrow\"\n    }}>{`toolbar.controlsConfig.fontBackgroundColor.colorsPerRow`}</h4>\n    <p>{`This is the maximum number of color options that will be shown in a single row. By default `}<inlineCode parentName=\"p\">{`10`}</inlineCode>{`.`}</p>\n    <Playground __position={8} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontBackgroundColor: {\\n          colorsPerRow: 30,\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontBackgroundColor: {\n                colorsPerRow: 30\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other number.`}</p>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontbackgroundcoloroptions\"\n    }}>{`toolbar.controlsConfig.fontBackgroundColor.options`}</h4>\n    <p>{`This is and array with the available color list. In order to see the default value go to: `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/default-configuration\"\n      }}>{`Default configuration section`}</a>{`.`}</p>\n    <Playground __position={9} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontBackgroundColor: {\\n          options: [\\n            { text: \\'black\\', value: \\'rgb(0, 0, 0)\\' },\\n            { text: \\'white\\', value: \\'rgb(255, 255, 255)\\' },\\n            { text: \\'red\\', value: \\'rgb(255, 0, 0)\\' },\\n            { text: \\'green\\', value: \\'rgb(0, 255, 0)\\' },\\n            { text: \\'blue\\', value: \\'rgb(0, 0, 255)\\' },\\n          ],\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontBackgroundColor: {\n                options: [{\n                  text: 'black',\n                  value: 'rgb(0, 0, 0)'\n                }, {\n                  text: 'white',\n                  value: 'rgb(255, 255, 255)'\n                }, {\n                  text: 'red',\n                  value: 'rgb(255, 0, 0)'\n                }, {\n                  text: 'green',\n                  value: 'rgb(0, 255, 0)'\n                }, {\n                  text: 'blue',\n                  value: 'rgb(0, 0, 255)'\n                }]\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other colors.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` property contains the text shown in tooltip when the user moves the mouse over the color.\nThe `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` property contains the value of the color in rgb, hex or string (`}<inlineCode parentName=\"p\">{`black`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`'red'`}</inlineCode>{`, etc.).`}</p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigfontsize\"\n    }}>{`toolbar.controlsConfig.fontSize`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontsizeoptions\"\n    }}>{`toolbar.controlsConfig.fontSize.options`}</h4>\n    <p>{`This is an array with the available sizes. In order to see the default value go to: `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/default-configuration\"\n      }}>{`Default configuration section`}</a>{`.`}</p>\n    <Playground __position={10} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontSize: {\\n          options: [\\n            \\'default\\',\\n            \\'4px\\',\\n            \\'8px\\',\\n            \\'12px\\',\\n            \\'24px\\',\\n            \\'36px\\',\\n            \\'60px\\',\\n            \\'72px\\',\\n            \\'96px\\',\\n          ],\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontSize: {\n                options: ['default', '4px', '8px', '12px', '24px', '36px', '60px', '72px', '96px']\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other font sizes.`}</p>\n    <h3 {...{\n      \"id\": \"toolbarcontrolsconfigfontfamily\"\n    }}>{`toolbar.controlsConfig.fontFamily`}</h3>\n    <h4 {...{\n      \"id\": \"toolbarcontrolsconfigfontfamilyoptions\"\n    }}>{`toolbar.controlsConfig.fontFamily.options`}</h4>\n    <p>{`This is an array with the available font families. In order to see the default value go to: `}<a parentName=\"p\" {...{\n        \"href\": \"/configuration/default-configuration\"\n      }}>{`Default configuration section`}</a>{`.`}</p>\n    <Playground __position={11} __code={'() => {\\n  const config = {\\n    toolbar: {\\n      controlsConfig: {\\n        fontFamily: {\\n          options: [\\n            \\'default\\',\\n            \\'Arial\\',\\n            \\'Tahoma\\',\\n            \\'Times New Roman\\',\\n            \\'Impact\\',\\n          ],\\n        },\\n      },\\n    },\\n  }\\n  const [editorState, setEditorState] = React.useState(\\n    MUIEditorState.createEmpty(config),\\n  )\\n  const onChange = newState => {\\n    setEditorState(newState)\\n  }\\n  return (\\n    <MUIEditor\\n      editorState={editorState}\\n      onChange={onChange}\\n      config={config}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      MUIEditor,\n      MUIEditorState,\n      toolbarControlTypes,\n      LANG_PREFIX,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const config = {\n          toolbar: {\n            controlsConfig: {\n              fontFamily: {\n                options: ['default', 'Arial', 'Tahoma', 'Times New Roman', 'Impact']\n              }\n            }\n          }\n        };\n        const [editorState, setEditorState] = React.useState(MUIEditorState.createEmpty(config));\n\n        const onChange = newState => {\n          setEditorState(newState);\n        };\n\n        return <MUIEditor editorState={editorState} onChange={onChange} config={config} mdxType=\"MUIEditor\" />;\n      }}\n    </Playground>\n    <p>{`You can edit the code above and try other font families.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}